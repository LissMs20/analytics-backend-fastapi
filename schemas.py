from pydantic import BaseModel, ConfigDict, Field
from typing import Optional, List, Dict, Any # Importamos Dict e Any para os datasets
from datetime import datetime, date # üí° Importamos 'date' para a produ√ß√£o

# --------------------------------------------------
# SCHEMAS DE AUTENTICA√á√ÉO E USU√ÅRIO (MANTIDOS)
# --------------------------------------------------

# Esquema base para UserCreate e UserUpdate
class UserBase(BaseModel):
    # Garante que o role seja um dos valores permitidos e define o padr√£o se necess√°rio
    name: str 
    username: str
    role: str = Field(..., pattern=r'^(admin|assistencia|producao)$') 

# Esquema para cria√ß√£o de usu√°rio (Admin/Inicial)
class UserCreate(UserBase):
    password: str

# üí° NOVO: Esquema para atualiza√ß√£o de usu√°rio (senha e role s√£o opcionais)
class UserUpdate(BaseModel):
    name: Optional[str] = None
    password: Optional[str] = Field(None, min_length=6) 
    role: Optional[str] = Field(None, pattern=r'^(admin|assistencia|producao)$')
    model_config = ConfigDict(from_attributes=True)

# üí° ATUALIZADO: Esquema de sa√≠da para o usu√°rio (inclui ID para listagem)
class User(UserBase):
    id: int # Adicionado o ID
    is_active: bool = True # Adicionado para completar o modelo do DB
    
    model_config = ConfigDict(from_attributes=True)

# Esquema para o Login
class Token(BaseModel):
    access_token: str
    token_type: str
    role: str
    name: str 

class TokenData(BaseModel):
    username: Optional[str] = None

# --------------------------------------------------
# SCHEMAS DE CHECKLIST (MANTIDOS)
# --------------------------------------------------

# 1. Esquema BASE (Campos M√≠nimos na Cria√ß√£o)
class ChecklistBase(BaseModel):
    produto: str
    quantidade: int
    observacao_producao: Optional[str] = None
    observacao_assistencia: Optional[str] = None
    vai_para_assistencia: bool = False

# 2. Esquema de CRIA√á√ÉO (Checklist Completo/Inicial)
class ChecklistCreate(ChecklistBase):
    responsavel: str 
    falha: Optional[str] = None
    localizacao_componente: Optional[str] = None 
    lado_placa: Optional[str] = None 
    setor: Optional[str] = None
    observacao: Optional[str] = None

class Falha(BaseModel):
    falha: str
    setor: Optional[str] = None
    localizacao_componente: Optional[str] = None
    lado_placa: Optional[str] = None
    observacao_producao: Optional[str] = None

class ChecklistCreateMulti(ChecklistBase):
    responsavel: str
    falhas: List[Falha]

# 3. Esquema de EDI√á√ÉO (Usado pela Assist√™ncia T√©cnica)
class ChecklistUpdate(BaseModel):
    falha: Optional[str] = None
    localizacao_componente: Optional[str] = None
    lado_placa: Optional[str] = None
    setor: Optional[str] = None
    quantidade: Optional[int] = None 
    status: Optional[str] = None
    observacao_producao: Optional[str] = None 
    observacao_assistencia: Optional[str] = None 
    # Adicionado para ser usado na finaliza√ß√£o de assist√™ncia
    responsavel_assistencia: Optional[str] = None
    falhas_json: Optional[str] = None

# 4. Esquema de SA√çDA (Retorno da API) - Usado no GET por ID
class Checklist(ChecklistCreate):
    id: int
    documento_id: str
    data_criacao: datetime
    data_finalizacao: Optional[datetime] = None
    responsavel_assistencia: Optional[str] = None
    status: str
    resultado_ia: Optional[str] = None
    falhas_json: Optional[str] = None 
    
    model_config = ConfigDict(from_attributes=True) 

# 5. Esquema de RESUMO - Usado no GET de Listagem (listar_dados)
class ChecklistResumo(BaseModel):
    id: int
    documento_id: str
    produto: Optional[str] = None
    quantidade: Optional[int] = None
    responsavel: Optional[str] = None
    data_criacao: Optional[datetime] = None
    status: Optional[str] = None
    
    # Campos que devem ser inclu√≠dos para visualiza√ß√£o r√°pida e Assist√™ncia
    falha: Optional[str] = None
    setor: Optional[str] = None
    falhas_json: Optional[str] = None
    observacao_producao: Optional[str] = None
    observacao_assistencia: Optional[str] = None

    responsavel_assistencia: Optional[str] = None 
    data_finalizacao: Optional[datetime] = None 
    resultado_ia: Optional[str] = None 

    model_config = ConfigDict(from_attributes=True)


# 6. Esquema de SA√çDA PAGINADA
class PaginatedChecklists(BaseModel):
    """Schema para retorno paginado de listas de checklists."""
    items: List[ChecklistResumo] 
    total_count: int

# --------------------------------------------------
# SCHEMAS DE AN√ÅLISE DA IA (CORRIGIDOS PARA MULTI-GR√ÅFICO)
# --------------------------------------------------

class AnalysisQuery(BaseModel):
    query: str

class Tip(BaseModel):
    title: str
    detail: str

# üí° NOVO: Esquema para estruturar os dados de um √∫nico gr√°fico
class ChartData(BaseModel):
    title: str
    labels: List[str]
    datasets: List[Dict[str, Any]]
    chart_type: str = Field('bar', description="Tipo de gr√°fico (ex: 'bar', 'line', 'pie')")


class AnalysisResponse(BaseModel):
    query: str
    summary: str
    # ‚úÖ CORRE√á√ÉO CR√çTICA: Agora aceita uma LISTA de gr√°ficos
    visualization_data: List[ChartData] = Field(default_factory=list)
    tips: List[Tip]

# --------------------------------------------------
# SCHEMAS DE REGISTRO DE PRODU√á√ÉO (MANTIDOS)
# --------------------------------------------------

class ProducaoBase(BaseModel):
    """
    Schema base para dados de produ√ß√£o.
    """
    # Usamos date em vez de datetime para simplificar a entrada (AAAA-MM-DD)
    data_registro: date = Field(..., description="Data do registro de produ√ß√£o (AAAA-MM-DD).")

class ProducaoCreate(ProducaoBase):
    """
    Campos de entrada para criar um registro de produ√ß√£o.
    """
    
    # ‚≠êÔ∏è CORRE√á√ÉO: Torne ambos opcionais para evitar erros de valida√ß√£o Pydantic
    # quando apenas um campo √© fornecido (e para aceitar 'None' antes de ser tratado)
    quantidade_diaria: Optional[int] = Field(None, ge=0, description="Quantidade de placas produzidas no dia.")
    quantidade_mensal: Optional[int] = Field(None, ge=0, description="Quantidade de placas produzidas no m√™s.")
    
    tipo_registro: str = Field(..., max_length=1, description="Tipo de registro: 'M' (Mensal) ou 'D' (Di√°rio).")
    
    # üí° ADI√á√ÉO DOS CAMPOS DE OBSERVA√á√ÉO QUE FALTAVAM AQUI
    observacao_mensal: Optional[str] = None
    observacao_diaria: Optional[str] = None
    
    responsavel: str = Field(..., description="Nome do usu√°rio respons√°vel pelo registro.")

# Esquema para atualiza√ß√£o (PATCH) de registro de produ√ß√£o
class ProducaoUpdate(BaseModel):
    """
    Campos opcionais para atualizar um registro existente.
    """
    quantidade_diaria: Optional[int] = Field(None, ge=0)
    quantidade_mensal: Optional[int] = Field(None, ge=0)
    
    # üí° ADI√á√ÉO: Observa√ß√µes
    observacao_mensal: Optional[str] = None
    observacao_diaria: Optional[str] = None

# Esquema de sa√≠da (Resposta da API)
class Producao(ProducaoBase):
    """
    Schema de sa√≠da que inclui o ID, o respons√°vel e as observa√ß√µes.
    """
    id: int
    tipo_registro: str 
    quantidade_diaria: Optional[int] = None
    quantidade_mensal: Optional[int] = None # Corrigido para ser Optional, pois depende do tipo_registro

    observacao_mensal: Optional[str] = None
    observacao_diaria: Optional[str] = None

    responsavel: str

    model_config = ConfigDict(from_attributes=True)