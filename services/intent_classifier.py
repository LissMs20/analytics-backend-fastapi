import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
from typing import List, Optional
import unicodedata
import re
import numpy as np

# --- ‚öôÔ∏è Fun√ß√£o de Pr√©-processamento e Normaliza√ß√£o (Exportada para uso externo, se necess√°rio) ---
def normalize_text(text: str) -> str:
    """Aplica tokeniza√ß√£o leve, min√∫sculas, remove acentos e caracteres n√£o-alfanum√©ricos."""
    if not isinstance(text, str):
        return ""
    text = text.lower().strip()
    # 1. Remove acentos
    text = unicodedata.normalize("NFD", text).encode("ascii", "ignore").decode("utf-8")
    # 2. Remove caracteres especiais, mantendo apenas letras, n√∫meros e espa√ßos
    text = re.sub(r"[^a-z0-9\s]", " ", text)
    # 3. Normaliza m√∫ltiplos espa√ßos
    text = re.sub(r"\s+", " ", text)
    return text

class IntentClassifier:
    """
    Classificador de inten√ß√£o local (fallback) usando TF-IDF e Regress√£o Log√≠stica.
    Robusto a varia√ß√µes de texto e desbalanceamento de classes.
    """
    def __init__(self):
        # n-grams (1,2) para capturar termos como "taxa rejei√ß√£o"
        self.vectorizer = TfidfVectorizer(ngram_range=(1,2), min_df=1, max_df=0.9)
        # class_weight='balanced' e max_iter=500 para estabilidade
        self.model = LogisticRegression(max_iter=500, class_weight='balanced', random_state=42)
        self.is_trained = False

    def train(self, texts: List[str], labels: List[str]):
        """Treina o modelo com o conjunto de dados fornecido."""
        
        # Pr√©-processamento de Normaliza√ß√£o ANTES de vetorizar (Melhoria 1)
        normalized_texts = [normalize_text(t) for t in texts]
        
        X = self.vectorizer.fit_transform(normalized_texts)
        self.model.fit(X, labels)
        self.is_trained = True
        
        # üìä Avalia√ß√£o de acur√°cia usando cross-validation (Melhoria 2)
        try:
            # Garante cv n√£o maior que o n√∫mero de classes ou 5
            cv_val = min(5, len(set(labels))) 
            scores = cross_val_score(self.model, X, labels, cv=cv_val)
            print(f"Acur√°cia m√©dia (cross-validation, cv={cv_val}): {scores.mean():.2f}")
        except Exception as e:
            print(f"Aviso: N√£o foi poss√≠vel rodar cross-validation. Detalhe: {e}")


    def predict(self, text: str) -> str:
        """Prev√™ a inten√ß√£o de uma √∫nica string de texto."""
        if not self.is_trained:
            return "general" # Fallback seguro
            
        normalized_text = normalize_text(text)
        X = self.vectorizer.transform([normalized_text])
        return self.model.predict(X)[0]

    def predict_proba(self, text: str) -> Optional[np.ndarray]:
        """Retorna as probabilidades de inten√ß√£o."""
        if not self.is_trained:
            return None
            
        normalized_text = normalize_text(text)
        X = self.vectorizer.transform([normalized_text])
        return self.model.predict_proba(X)